# -*- coding: utf-8 -*-
"""CÃ³digo POO - VoAgro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgaVTZo_qeh-tYWZyl3pEDgVB1AXbnn2

# **Projeto de POO - VoAgro**

#1.   Superclasse DroneT0: 
"""

import cv2
import socket

class DroneT0:
    def __init__(self, vidwidth = 640, vidheight = 480):
        self.frames = [] # Initializes frame list
        
        self.video_cap = cv2.VideoCapture(index = 0) # Creates and configures video stream
        self.video_cap.set(propId = cv2.CAP_PROP_FRAME_WIDTH, value = vidwidth)
        self.video_cap.set(propId = cv2.CAP_PROP_FRAME_HEIGHT, value = vidheight)

        self.i = 0

    def get_frame(self):
        sucess, img = self.video_cap.read()
        if sucess == True:
            self.frames.append(img)
        else:
            print("Failed to capture image!")

    def save_img(self):
        cv2.imwrite("root/img-%d.jpg" % i, self.frames[0]) # Placeholder line
        self.frames.pop[0]
        self.i += 1

""" #2.   Subclasse DroneT1 (Super de T2): """

class DroneT1(DroneT0):
    def __init__(self, host = "127.0.0.1", port = 61234, vidwidth = 640, vidheight = 480):
        super().__init__(vidwidth, vidheight)

        self.host = host
        self.port = port
        self.socket = socket.socket(family = socket.AF_INET, type = socket.SOCK_STREAM)
        #self.socket.connect()
    
    def set_connection(self):
        self.socket.connect((self.host, self.port))

    def send_image(self):
        self.socket.sendall(b"Test1")
        data = self.socket.recv(1024)
        print(f"Received {data!r}")
        
        """
        if self.socket.buffer_write(frame[0]): # Placeholder line
            self.frames.pop[0]
        else:
            self.set_connection() # Placeholder line
        """

    def mainloop(self):
        # Placeholder block
        self.set_connection()
        self.send_image()

"""#3.   Subclasse DroneT2: """

class DroneT2(DroneT1):
    def __init__(self, model, host = "127.0.0.1", port = 61234, vidwidth = 640, vidheight = 480):
        super().__init__(self, host, port, vidwidth, vidheight)

        self.model = model
        self.inferences = []

    def send_results(self):
        if self.socket.buffer_write(inferences[0]): # Placeholder line
            self.inferences.pop[0]
        else:
            self.set_connection() # Placeholder line
    
    def get_inferences(self):
        self.inferences.extend(self.model.predict(self.frames))
        self.frames = []


if __name__ == "__main__":
    print("Running...")
    testdrone = DroneT1()
    testdrone.mainloop()
    print("End.")
