# -*- coding: utf-8 -*-
"""CÃ³digo POO - VoAgro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mgaVTZo_qeh-tYWZyl3pEDgVB1AXbnn2

# **Projeto de POO - VoAgro**

#4.   Classe Local_server: """

class Local_server:
    def __init__(self, allowed_clients, model, host):
        self.clients = allowed_clients
        self.sockets = [create_socket(i) for i in self.clients] # Placeholder line
        
        self.frames = [] # Initializes frame list from clients
        self.stitched_image = None

        self.model = model

        self.inferences = []

        self.host = host
        self.host_socket = create_socket(host) # Placeholder line

    def listen(self):
        # Asynchronous method
        for socket in self.sockets: # Placeholder block
            if socket.listen() == True:
                socket.accept()

    def receive_data(self, socket):
        success, data = socket.buffer_read() # Placeholder line
        if success == True:
            if type(data) == "frames": # Placeholder block
                self.frames.extend(data) # if data requires no conversion into a list of frames
                # else, convert and then append/extend
            elif type(data) == "inferences": # Placeholder block
                self.inferences.extend(data) # idem
            else:
                print("Data type invalid. No data read.")
        else:
            print("Buffer_read unsuccessful. No data read.")

    def stitch_images(self):
        self.stiched_image = stitching_algorithm(self.frames) # Placeholder line
        self.frames = []

    def get_inferences(self):
        self.inferences.extend(self.model.predict(self.stiched_image))
        #print(predictions)

    def send_data(self): # WIP
        pass
